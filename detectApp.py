# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '/home/nancy/Desktop/detectApp.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QHBoxLayout, QMainWindow, QPushButton, QSpinBox, QVBoxLayout, QWidget, QFileDialog, QLabel, QErrorMessage
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtCore import QTimer
 
import cv2
import sys
from detectCore import *





def pixmap_from_cv_image(cv_image):
    if len(cv_image.shape) == 2:
        height, width = cv_image.shape
        bytesPerLine = cv2.split(cv_image)[0]
        bytesPerLine = 3 * bytesPerLine.shape[1]
    else:
        height, width, _ = cv_image.shape
        bytesPerLine = 3 * width
    qImg = QImage(cv_image.data, width, height, bytesPerLine, QImage.Format.Format_RGB888).rgbSwapped()
    return QPixmap(qImg)

def resize_image(image_data, max_img_width, max_img_height):
    scale_percent = max(max_img_width / image_data.shape[1], max_img_height / image_data.shape[0])
    width = int(image_data.shape[1] * scale_percent)
    height = int(image_data.shape[0] * scale_percent)
    newSize = (width, height)
    image_resized = cv2.resize(image_data, newSize, interpolation= cv2.INTER_AREA)
    # image_resized = cv2.resize(image_data, (int(image_data.shape[1]/4), int(image_data.shape[0]/4)),None, None, None, cv2.INTER_AREA)
    return image_resized


class Ui_MainWindow(object):

    def __init__(self):
        super(Ui_MainWindow, self).__init__()
        self.timer = QtCore.QTimer()
        self.timer.start(27)


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1288, 921)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.playVidbtn = QtWidgets.QPushButton(self.centralwidget)
        self.playVidbtn.setGeometry(QtCore.QRect(30, 30, 89, 25))
        self.playVidbtn.setObjectName("playVidbtn")
        self.openBtn = QtWidgets.QPushButton(self.centralwidget)
        self.openBtn.setGeometry(QtCore.QRect(210, 30, 89, 25))
        self.openBtn.setObjectName("openBtn")
        self.processBtn = QtWidgets.QPushButton(self.centralwidget)
        self.processBtn.setGeometry(QtCore.QRect(120, 30, 89, 25))
        self.processBtn.setObjectName("processBtn")

        # self.text = QtWidgets.QLabel(self.centralwidget)
        # self.text.setGeometry(QtCore.QRect(850, 80, 371, 731))
        # self.text.setObjectName("textBrowser")
        # self.text.setWordWrap(True)
        # self.text = QtWidgets.QLineEdit(self.centralwidget)
        # self.text.setGeometry(QtCore.QRect(850, 80, 371, 731))
        # self.text.setObjectName("textBrowser")



        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        # self.textBrowser.setGeometry(QtCore.QRect(850, 80, 371, 731))
        self.textBrowser.setGeometry(QtCore.QRect(20, 710, 1241, 131))

        self.textBrowser.setObjectName("textBrowser")
        self.textBrowser.setWordWrapMode(True)

        # self.splitter_2 = QtWidgets.QSplitter(self.centralwidget)
        # self.splitter_2.setGeometry(QtCore.QRect(30, 80, 781, 751))
        # self.splitter_2.setOrientation(QtCore.Qt.Vertical)
        # self.splitter_2.setObjectName("splitter_2")
        # self.splitter = QtWidgets.QSplitter(self.splitter_2)
        # self.splitter.setOrientation(QtCore.Qt.Horizontal)
        # self.splitter.setObjectName("splitter")
        self.splitter = QtWidgets.QSplitter(self.centralwidget)
        self.splitter.setGeometry(QtCore.QRect(40, 70, 1211, 551))
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")

        self.srcImg = QtWidgets.QLabel(self.splitter)
        self.srcImg.setText("")
        self.srcImg.setObjectName("srcImg")
        self.rstImg = QtWidgets.QLabel(self.splitter)
        self.rstImg.setText("")
        self.rstImg.setObjectName("rstImg")

        # self.horizontalSlider = QtWidgets.QSlider(self.splitter_2)
        self.horizontalSlider = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider.setGeometry(QtCore.QRect(40, 660, 1211, 16))
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1288, 22))
        self.menubar.setObjectName("menubar")
        self.menuVideo = QtWidgets.QMenu(self.menubar)
        self.menuVideo.setObjectName("menuVideo")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuVideo.menuAction())

        self.retranslateUi(MainWindow)
        self.horizontalSlider.valueChanged['int'].connect(self.setFps) # type: ignore
        self.openBtn.clicked.connect(self.loadImage) # type: ignore
        self.processBtn.clicked.connect(self.setPhoto) # type: ignore

        self.playVidbtn.clicked.connect(self.start_timer) # type: ignore
        self.timer.timeout.connect(self.playVideo)
        # self.playVidbtn.clicked.connect(self.playVideo) # type: ignore

        self.textBrowser.setText("None")
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


        self.filename = None
        self.result_img = None
        self.detector = initYolo("./runs/train/exp24/weights/best.pt", 0.6)
        self.max_img_height = 400
        self.max_img_width = 600
        self.fps = 0
        self.frames_num = 0
        self.cap = None
        self.strings_lose = 0
        self.nuts_lose = 0
        self.insulate_lose = 0

        self.cap = cv2.VideoCapture("/home/nancy/Desktop/myWorkspace/test.mp4")
        self.frames_num = self.cap.get(7)


    def setFps(self,value):
        self.fps = value
        if self.fps >= self.frames_num:
            self.fps = self.frames_num-1
        self.cap.set(cv2.CAP_PROP_POS_FRAMES,self.fps)
        
        ret, self.src_img = self.cap.read()
        if ret:
            resized_img = resize_image(self.src_img, self.max_img_width, self.max_img_height)
            self.srcImg.setPixmap(pixmap_from_cv_image(resized_img))
            self.update()
        else:
            self.textBrowser.setText("fail to read video")




    def loadImage(self):
        self.filename = QFileDialog.getOpenFileName(filter="Image (*.*)")[0]
        self.src_img = cv2.imread(self.filename)
        resized_img = resize_image(self.src_img, self.max_img_width, self.max_img_height)
        self.srcImg.setPixmap(pixmap_from_cv_image(resized_img))
        # self.setPhoto()
    
    def setPhoto(self):
        self.result_img, rst, fps = processRlt2Qt(self.detector, self.src_img)
        resized_img = resize_image(self.result_img, self.max_img_width, self.max_img_height)
        self.rstImg.setPixmap(pixmap_from_cv_image(resized_img))

        self.strings_lose += 0 if rst[0] else 1
        self.strings_lose += 0 if rst[3] else 1
        self.nuts_lose += 0 if rst[1] else 1
        self.nuts_lose += 0 if rst[4] else 1
        self.insulate_lose += 0 if rst[2] else 1
        self.insulate_lose += 0 if rst[5] else 1
        d = {True:"OK",False:"Lose"}

        self.textBrowser.setText("left_string: {} \t right_string: {}\nleft_nut: {}\t right_nut: {}\nleft_insulate:{} \t right_insulate:{} \nfps:{}\
            \n\nprocessed pic:{}\ntotal_string_lose:{}\ttotal_nuts_lose:{}\ttotal_insulate_lose:{}".format(d[rst[0]], d[rst[3]], d[rst[1]],d[rst[4]], d[rst[2]], d[rst[5]], fps,self.fps+1, self.strings_lose, self.nuts_lose, self.insulate_lose))



    def start_timer(self):
        try:
            self.playVideo()
        except:
            print("No frame")

    def playVideo(self):
        # self.filename = QFileDialog.getOpenFileName()[0]
        # self.cap = cv2.VideoCapture(self.filename)
        # self.frames_num = self.cap.get(7)
        # self.cap.set(cv2.CAP_PROP_POS_FRAMES,self.fps)
        
        # ret, self.src_img = self.cap.read()
        # resized_img = resize_image(self.src_img, self.max_img_width, self.max_img_height)
        # self.srcImg.setPixmap(pixmap_from_cv_image(resized_img))
        # self.update()

        

        if self.fps >= self.frames_num:
            return
        self.cap.set(cv2.CAP_PROP_POS_FRAMES,self.fps)
        
        ret, self.src_img = self.cap.read()
        if ret:
            resized_img = resize_image(self.src_img, self.max_img_width, self.max_img_height)
            self.srcImg.setPixmap(pixmap_from_cv_image(resized_img))
            self.fps += 1
            self.update()


    def update(self):
        # resized_img = resize_image(self.src_img, self.max_img_width, self.max_img_height)
        # self.srcImg.setPixmap(pixmap_from_cv_image(resized_img))
        self.setPhoto()


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "fastern-detect"))
        self.playVidbtn.setText(_translate("MainWindow", "PlayVideo"))
        self.openBtn.setText(_translate("MainWindow", "OpenPic"))
        self.processBtn.setText(_translate("MainWindow", "Process"))
        self.menuVideo.setTitle(_translate("MainWindow", "Video"))


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(window)
    window.show()

    app.exec()
